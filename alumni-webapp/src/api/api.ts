/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdditionalData
 */
export interface AdditionalData {
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'personalIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'birthDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'language'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'nationality'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'maritalStatusKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalData
     */
    'nrOfChildren'?: string;
}
/**
 * 
 * @export
 * @interface AdditionalPaymentDeduction
 */
export interface AdditionalPaymentDeduction {
    /**
     * 
     * @type {string}
     * @memberof AdditionalPaymentDeduction
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalPaymentDeduction
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalPaymentDeduction
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalPaymentDeduction
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalPaymentDeduction
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'addressType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street2ndLine'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'houseNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'apartment'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'postalCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'district'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface Administrator
 */
export interface Administrator {
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'group'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'timeRecording'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'hr'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'payroll'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'supervisor'?: string;
}
/**
 * 
 * @export
 * @interface BankDetails
 */
export interface BankDetails {
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'bankDetailsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'payee'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'postCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'bankCountryKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'bankKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'bankNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'bankControlKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'swift'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'paymentMethod'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankDetails
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface BankTransfer
 */
export interface BankTransfer {
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'wageType'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'hrPayrollAmount'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'bankCountryKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'bankNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'bankAccountNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'transferDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof BankTransfer
     */
    'currency'?: string;
}
/**
 * 
 * @export
 * @interface BasicPayGroups
 */
export interface BasicPayGroups {
    /**
     * 
     * @type {Personnel}
     * @memberof BasicPayGroups
     */
    'personnel'?: Personnel;
    /**
     * 
     * @type {Payscale}
     * @memberof BasicPayGroups
     */
    'payscale'?: Payscale;
    /**
     * 
     * @type {Array<Paywage>}
     * @memberof BasicPayGroups
     */
    'payWages'?: Array<Paywage>;
}
/**
 * 
 * @export
 * @interface Communication
 */
export interface Communication {
    /**
     * 
     * @type {string}
     * @memberof Communication
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Communication
     */
    'communicationId'?: string;
}
/**
 * 
 * @export
 * @interface Employment
 */
export interface Employment {
    /**
     * 
     * @type {string}
     * @memberof Employment
     */
    'zalarisId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employment
     */
    'companyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employment
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employment
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Employment
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface EmploymentHistoryModel
 */
export interface EmploymentHistoryModel {
    /**
     * 
     * @type {string}
     * @memberof EmploymentHistoryModel
     */
    'ssid'?: string;
    /**
     * 
     * @type {Array<Employment>}
     * @memberof EmploymentHistoryModel
     */
    'employments'?: Array<Employment>;
}
/**
 * 
 * @export
 * @interface EnterpriseStructure
 */
export interface EnterpriseStructure {
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'companyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'personnelArea'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'personnelSubarea'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'costCenter'?: string;
    /**
     * 
     * @type {string}
     * @memberof EnterpriseStructure
     */
    'costCenterName'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'path'?: string;
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorResponse
     */
    'errors'?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Name
 */
export interface Name {
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'formOfAddressKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'nickName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'genderKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof Name
     */
    'initials'?: string;
}
/**
 * 
 * @export
 * @interface OrganizationalAssignmentGroups
 */
export interface OrganizationalAssignmentGroups {
    /**
     * 
     * @type {Personnel}
     * @memberof OrganizationalAssignmentGroups
     */
    'personnel'?: Personnel;
    /**
     * 
     * @type {EnterpriseStructure}
     * @memberof OrganizationalAssignmentGroups
     */
    'enterpriseStructure'?: EnterpriseStructure;
    /**
     * 
     * @type {PersonnelStructure}
     * @memberof OrganizationalAssignmentGroups
     */
    'personnelStructure'?: PersonnelStructure;
    /**
     * 
     * @type {OrganizationalPlan}
     * @memberof OrganizationalAssignmentGroups
     */
    'organizationalPlan'?: OrganizationalPlan;
    /**
     * 
     * @type {Administrator}
     * @memberof OrganizationalAssignmentGroups
     */
    'administrator'?: Administrator;
}
/**
 * 
 * @export
 * @interface OrganizationalPlan
 */
export interface OrganizationalPlan {
    /**
     * 
     * @type {string}
     * @memberof OrganizationalPlan
     */
    'position'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationalPlan
     */
    'job'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationalPlan
     */
    'organizationUnit'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationalPlan
     */
    'organizationKey'?: string;
}
/**
 * 
 * @export
 * @interface PayrollResult
 */
export interface PayrollResult {
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'sequence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'area'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'inPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'forPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'startPayroll'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'endPayroll'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'companyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'payDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'amountPaid'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResult
     */
    'currency'?: string;
    /**
     * 
     * @type {Array<PayrollResultEntry>}
     * @memberof PayrollResult
     */
    'payrollResultsDetails'?: Array<PayrollResultEntry>;
    /**
     * 
     * @type {Array<PayrollResultEntry>}
     * @memberof PayrollResult
     */
    'cumulativePayrollResults'?: Array<PayrollResultEntry>;
    /**
     * 
     * @type {Array<BankTransfer>}
     * @memberof PayrollResult
     */
    'bankTransfers'?: Array<BankTransfer>;
}
/**
 * 
 * @export
 * @interface PayrollResultEntry
 */
export interface PayrollResultEntry {
    /**
     * 
     * @type {string}
     * @memberof PayrollResultEntry
     */
    'wageType'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResultEntry
     */
    'hrPayrollNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResultEntry
     */
    'hrPayrollAmount'?: string;
}
/**
 * 
 * @export
 * @interface PayrollResultsModel
 */
export interface PayrollResultsModel {
    /**
     * 
     * @type {string}
     * @memberof PayrollResultsModel
     */
    'ssid'?: string;
    /**
     * 
     * @type {string}
     * @memberof PayrollResultsModel
     */
    'zalarisId'?: string;
    /**
     * 
     * @type {Array<PayrollResult>}
     * @memberof PayrollResultsModel
     */
    'payrollResults'?: Array<PayrollResult>;
}
/**
 * 
 * @export
 * @interface Payscale
 */
export interface Payscale {
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'subtype'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'area'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'group'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'capacityUtilizationLevel'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'workingHoursPerPayrollPeriod'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'annualSalary'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payscale
     */
    'annualSalaryCurrencyKey'?: string;
}
/**
 * 
 * @export
 * @interface Paywage
 */
export interface Paywage {
    /**
     * 
     * @type {string}
     * @memberof Paywage
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Paywage
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Paywage
     */
    'unit'?: string;
}
/**
 * 
 * @export
 * @interface PersonalDataModel
 */
export interface PersonalDataModel {
    /**
     * 
     * @type {string}
     * @memberof PersonalDataModel
     */
    'ssid'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonalDataModel
     */
    'zalarisId'?: string;
    /**
     * 
     * @type {OrganizationalAssignmentGroups}
     * @memberof PersonalDataModel
     */
    'orgAssignment'?: OrganizationalAssignmentGroups;
    /**
     * 
     * @type {PersonalInformationGroups}
     * @memberof PersonalDataModel
     */
    'personalInformation'?: PersonalInformationGroups;
    /**
     * 
     * @type {Array<Address>}
     * @memberof PersonalDataModel
     */
    'addresses'?: Array<Address>;
    /**
     * 
     * @type {Array<Communication>}
     * @memberof PersonalDataModel
     */
    'communications'?: Array<Communication>;
    /**
     * 
     * @type {BasicPayGroups}
     * @memberof PersonalDataModel
     */
    'basicPay'?: BasicPayGroups;
    /**
     * 
     * @type {Array<RecurringPaymentDeduction>}
     * @memberof PersonalDataModel
     */
    'recurringPaymentDeductions'?: Array<RecurringPaymentDeduction>;
    /**
     * 
     * @type {Array<AdditionalPaymentDeduction>}
     * @memberof PersonalDataModel
     */
    'additionalPaymentDeductions'?: Array<AdditionalPaymentDeduction>;
    /**
     * 
     * @type {Array<BankDetails>}
     * @memberof PersonalDataModel
     */
    'bankDetails'?: Array<BankDetails>;
}
/**
 * 
 * @export
 * @interface PersonalInformationGroups
 */
export interface PersonalInformationGroups {
    /**
     * 
     * @type {Personnel}
     * @memberof PersonalInformationGroups
     */
    'personnel'?: Personnel;
    /**
     * 
     * @type {Name}
     * @memberof PersonalInformationGroups
     */
    'name'?: Name;
    /**
     * 
     * @type {AdditionalData}
     * @memberof PersonalInformationGroups
     */
    'additionalData'?: AdditionalData;
}
/**
 * 
 * @export
 * @interface Personnel
 */
export interface Personnel {
    /**
     * 
     * @type {string}
     * @memberof Personnel
     */
    'personnelNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Personnel
     */
    'changedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Personnel
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Personnel
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface PersonnelStructure
 */
export interface PersonnelStructure {
    /**
     * 
     * @type {string}
     * @memberof PersonnelStructure
     */
    'payrollArea'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonnelStructure
     */
    'contract'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonnelStructure
     */
    'employeeGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonnelStructure
     */
    'employeeSubgroup'?: string;
}
/**
 * 
 * @export
 * @interface RecurringPaymentDeduction
 */
export interface RecurringPaymentDeduction {
    /**
     * 
     * @type {string}
     * @memberof RecurringPaymentDeduction
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecurringPaymentDeduction
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecurringPaymentDeduction
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecurringPaymentDeduction
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecurringPaymentDeduction
     */
    'endDate'?: string;
}

/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [ssid] 
         * @param {string} [zalarisId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory: async (ssid?: string, zalarisId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/employees/employment/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ssid !== undefined) {
                localVarQueryParameter['ssid'] = ssid;
            }

            if (zalarisId !== undefined) {
                localVarQueryParameter['zalarisId'] = zalarisId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalData: async (zalarisId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zalarisId' is not null or undefined
            assertParamExists('getPersonalData', 'zalarisId', zalarisId)
            const localVarPath = `/api/employees/{zalarisId}/personal-data`
                .replace(`{${"zalarisId"}}`, encodeURIComponent(String(zalarisId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [ssid] 
         * @param {string} [zalarisId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmploymentHistory(ssid?: string, zalarisId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentHistoryModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmploymentHistory(ssid, zalarisId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalData(zalarisId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalData(zalarisId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [ssid] 
         * @param {string} [zalarisId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmploymentHistory(ssid?: string, zalarisId?: string, options?: any): AxiosPromise<EmploymentHistoryModel> {
            return localVarFp.getEmploymentHistory(ssid, zalarisId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalData(zalarisId: string, options?: any): AxiosPromise<PersonalDataModel> {
            return localVarFp.getPersonalData(zalarisId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @param {string} [ssid] 
     * @param {string} [zalarisId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getEmploymentHistory(ssid?: string, zalarisId?: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getEmploymentHistory(ssid, zalarisId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} zalarisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public getPersonalData(zalarisId: string, options?: AxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).getPersonalData(zalarisId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayrollResults: async (zalarisId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zalarisId' is not null or undefined
            assertParamExists('getPayrollResults', 'zalarisId', zalarisId)
            const localVarPath = `/api/employees/{zalarisId}/payroll-results`
                .replace(`{${"zalarisId"}}`, encodeURIComponent(String(zalarisId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {string} sequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayslip: async (zalarisId: string, sequenceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zalarisId' is not null or undefined
            assertParamExists('getPayslip', 'zalarisId', zalarisId)
            // verify required parameter 'sequenceId' is not null or undefined
            assertParamExists('getPayslip', 'sequenceId', sequenceId)
            const localVarPath = `/api/employees/{zalarisId}/payroll-results/{sequenceId}/payslip`
                .replace(`{${"zalarisId"}}`, encodeURIComponent(String(zalarisId)))
                .replace(`{${"sequenceId"}}`, encodeURIComponent(String(sequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayrollResults(zalarisId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollResultsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayrollResults(zalarisId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {string} sequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayslip(zalarisId: string, sequenceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayslip(zalarisId, sequenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * 
         * @param {string} zalarisId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayrollResults(zalarisId: string, options?: any): AxiosPromise<PayrollResultsModel> {
            return localVarFp.getPayrollResults(zalarisId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} zalarisId 
         * @param {string} sequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayslip(zalarisId: string, sequenceId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getPayslip(zalarisId, sequenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PayrollApi - object-oriented interface
 * @export
 * @class PayrollApi
 * @extends {BaseAPI}
 */
export class PayrollApi extends BaseAPI {
    /**
     * 
     * @param {string} zalarisId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApi
     */
    public getPayrollResults(zalarisId: string, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getPayrollResults(zalarisId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} zalarisId 
     * @param {string} sequenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApi
     */
    public getPayslip(zalarisId: string, sequenceId: string, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getPayslip(zalarisId, sequenceId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokenProviderApi - axios parameter creator
 * @export
 */
export const TokenProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('token', 'code', code)
            const localVarPath = `/api/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenProviderApi - functional programming interface
 * @export
 */
export const TokenProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async token(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.token(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenProviderApi - factory interface
 * @export
 */
export const TokenProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenProviderApiFp(configuration)
    return {
        /**
         * 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(code: string, options?: any): AxiosPromise<void> {
            return localVarFp.token(code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenProviderApi - object-oriented interface
 * @export
 * @class TokenProviderApi
 * @extends {BaseAPI}
 */
export class TokenProviderApi extends BaseAPI {
    /**
     * 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenProviderApi
     */
    public token(code: string, options?: AxiosRequestConfig) {
        return TokenProviderApiFp(this.configuration).token(code, options).then((request) => request(this.axios, this.basePath));
    }
}


